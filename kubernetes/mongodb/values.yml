## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
##
global:
  storageClass: do-block-storage
  namespaceOverride: fluentsearch-mongo-db
nodeSelector:
  doks.digitalocean.com/node-pool: mongo-db-pool
affinity:
  doks.digitalocean.com/node-pool: mongo-db-pool

image:
  registry: docker.io
  repository: bitnami/mongodb-sharded
  tag: 4.4.3-debian-10-r27
  pullPolicy: IfNotPresent
  pullSecrets:
  debug: false

mongodbRootPassword: Fluent$earch@MongoDB
replicaSetKey: fluentsearch
existingSecret:
usePasswordFile: false
shards: 3

shardsvr:
  dataNode:
    replicas: 2
    resources: {}
    mongodbExtraFlags: []
    priorityClassName:
    podAffinityPreset: ""
    podAntiAffinityPreset: soft
    affinity: {}
    # NODE DEPLOYMENT
    nodeSelector:
      doks.digitalocean.com/node-pool: mongo-db-pool

    tolerations: []
    podManagementPolicy: OrderedReady
    updateStrategy:
      type: RollingUpdate
    sidecars: []
    initContainers: []
    podAnnotations: {}
    podLabels: {}
    extraVolumes: []
    extraVolumeMounts: []
    schedulerName:
    pdb:
      enabled: false
      minAvailable: 0
      maxUnavailable: 1
    serviceAccount:
      create: false

  arbiter:
    replicas: 1
    resources: {}
    mongodbExtraFlags: []
    priorityClassName:
    podAffinityPreset: ""
    podAntiAffinityPreset: soft
    nodeAffinityPreset:
      type: ""
      key: ""
      values: []
    affinity: {}
    nodeSelector: {}
    tolerations: []
    podManagementPolicy: OrderedReady
    updateStrategy:
      type: RollingUpdate
    config:
    configCM:
    extraEnvVars:
    extraEnvVarsCM:
    extraEnvVarsSecret:
    sidecars: []
    initContainers: []
    podAnnotations: {}
    podLabels: {}
    extraVolumes: []
    extraVolumeMounts: []
    schedulerName:
    serviceAccount:
      create: false
  persistence:
    enabled: true
    mountPath: /bitnami/mongodb
    subPath: ""
    accessModes:
      - ReadWriteOnce
    size: 6Gi
    annotations: {}

configsvr:
  replicas: 2
  resources: {}
  mongodbExtraFlags: []
  priorityClassName:
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  config:
  configCM:
  extraEnvVars:
  extraEnvVarsCM:
  extraEnvVarsSecret:
  sidecars: []
  initContainers: []
  podAnnotations: {}
  podLabels: {}
  extraVolumes: []
  extraVolumeMounts: []
  schedulerName:
  pdb:
    enabled: false
    minAvailable: 0
    maxUnavailable: 1
  persistence:
    enabled: true
    mountPath: /bitnami/mongodb
    subPath: ""
    accessModes:
      - ReadWriteOnce
    size: 3Gi
    annotations: {}
  serviceAccount:
    create: false
  external:
    host:
    rootPassword:
    replicasetName:
    replicasetKey:
mongos:
  replicas: 2
  resources: {}
  mongodbExtraFlags: []
  priorityClassName:
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  config:
  configCM:
  extraEnvVars:
  extraEnvVarsCM:
  extraEnvVarsSecret:
  sidecars: []
  initContainers: []
  podAnnotations: {}
  podLabels: {}
  extraVolumes: []
  extraVolumeMounts: []
  schedulerName:
  useStatefulSet: false
  pdb:
    enabled: false
    minAvailable: 0
    maxUnavailable: 1
  serviceAccount:
    create: false
common:
  useHostnames: true
  mongodbEnableIPv6: false
  mongodbDirectoryPerDB: false
  mongodbSystemLogVerbosity: 0
  mongodbDisableSystemLog: false
  mongodbMaxWaitTimeout: 120
  sidecars: []
  initContainers: []
  podAnnotations: {}
  podLabels: {}
  extraVolumes: []
  extraVolumeMounts: []
  serviceAccount:
    create: false

volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/minideb
    tag: buster
    pullPolicy: Always
  resources: {}

securityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
  runAsNonRoot: true

clusterDomain: cluster.local

service:
  name:
  annotations: {}
  type: ClusterIP
  externalTrafficPolicy: Cluster
  port: 27017
  clusterIP:
  nodePort:
  externalIPs: []
  loadBalancerIP:
  loadBalancerSourceRanges: []
  extraPorts: []
  sessionAffinity: None

livenessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

metrics:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/mongodb-exporter
    tag: 0.11.2-debian-10-r59
    pullPolicy: Always
  extraArgs: ""

  livenessProbe:
    enabled: false
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 3
    successThreshold: 1

  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9216"

  podMonitor:
    enabled: false
    namespace: monitoring
    interval: 30s
    additionalLabels: {}
